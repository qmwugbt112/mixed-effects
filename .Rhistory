Fdose
appleWT<-vector(length=Nyears*Ntrees*Ssize)			# vector to store apple weights#
#
#Add in the different random * fixed effects#
for (i in 1:Nyears) appleWT[YearID==i]<-Ymeans[i]#
for (i in 1:Ntrees) {#
		appleWT[TreeID==i]<-appleWT[TreeID==i]+Tmeans[i]#
		}#
#
# add fixed fertizler effect		#
for (i in 1:Nyears) appleWT<-appleWT+Fdose*FeffectM+FeffectC#
# add error around tree & variety effects#
appleWT<-(appleWT+rnorm(Nyears*Ntrees*2*Ssize,sd=30))/10#
#
MyData<-data.frame(cbind(Year,TreeID,Fdose,appleWT))
MyData<-data.frame(cbind(YearID,TreeID,Fdose,appleWT))
ibrary(lattice)#
M1<-lm(appleWT~YearID)#
M2<-lme(appleWT~1,random=~1|YearID)#
#
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose)#
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose|TreeID)
levels(YearID)
M1<-lm(appleWT~YearID)#
M2<-lme(appleWT~1,random=~1|YearID)#
#
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose)#
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose|TreeID)
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose)
appleWT
TreeID<-rep(1:Ntrees,Nyears,each=Ssize)
TreeID
YearID<-factor(rep(2000+(1:Nyears),each=Ntrees*Ssize)) 	# year
YearID
length(YearID)
length(TreeID)
Fdose<-vector(length=length(YearID))#
	for (i in levels(YearID)) Fdose[YearID==i]<-rnorm(1,30,5)
Fdose
appleWT<-vector(length=Nyears*Ntrees*Ssize)			# vector to store apple weights
length(appleWT)
Script to generate data in which an orchard has #
# a sample of apples weighed in each year from each tree.#
# All trees are fertilized each year, but the amount of#
# fertilizer per tree varies slightly among years#
#
Ntrees<-6#
Nyears<-10#
Tmeans<-rnorm(Ntrees,100,20)				# tree performance mean 100, sd 20#
Ymeans<-rnorm(Nyears,0,2)	  				# difference over years mean 0, sd 10#
Ssize<-4									# sample size of apples from each tree#
FeffectM<-.5								# weight increase per unif of fertiliser each year#
FeffectC<-10								# intercept of fertilizer effect#
#
TreeID<-rep(1:Ntrees,Nyears,each=Ssize)  	# unique number for each tree#
TreeID<-factor(TreeID)						#
YearID<-factor(rep(2000+(1:Nyears),each=Ntrees*Ssize)) 	# year#
Fdose<-vector(length=length(YearID))#
	for (i in levels(YearID)) Fdose[YearID==i]<-rnorm(1,30,5)			# dose of fertiliser on each year#
appleWT<-vector(length=Nyears*Ntrees*Ssize)			# vector to store apple weights#
#
#Add in the different random * fixed effects#
for (i in 1:Nyears) appleWT[YearID==i]<-Ymeans[i]#
for (i in 1:Ntrees) {#
		appleWT[TreeID==i]<-appleWT[TreeID==i]+Tmeans[i]#
		}#
#
# add fixed fertizler effect		#
for (i in 1:Nyears) appleWT<-appleWT+Fdose*FeffectM+FeffectC#
# add error around tree & variety effects#
appleWT<-(appleWT+rnorm(Nyears*Ntrees*Ssize,sd=30))/10#
#
MyData<-data.frame(cbind(YearID,TreeID,Fdose,appleWT))
library(nlme)#
library(lattice)#
M1<-lm(appleWT~YearID)#
M2<-lme(appleWT~1,random=~1|YearID)#
#
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose)#
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose|TreeID)
source('my_dataset.R')
source(file.choose())
head(MyData)
source(file.choose())
head(MyData)
MyData<-data.frame(list(YearID,TreeID,Fdose,appleWT))
head(MyData)
MyData<-data.frame(YearID,TreeID,Fdose,appleWT)
head(MyData)
source('./my_dataset.R')
source('my_dataset.R')
Get an idea of the data by printing it out#
head(MyData)#
#
# Or#
MyData[1:30,]
is.factor(YearID)
is.factor(TreeID)
M3<-lm(appleWT~TreeID)#
M4<-lme(appleWT~1,random=~1|TreeID)
M3
M4
summary(M3)
xyplot(appleWT+fitted(M3)+fitted(M4)~TreeID)
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose|TreeID)
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose)
print out the two models#
summary(M1)#
summary(M2)
str(M1)
anova(M1)
11.288^.5
summary(M2)
xyplot(appleWT+fitted(M3)+fitted(M4)~TreeID)
M7<-lm(appleWT~Fdose+TreeID)#
M8<-lme(appleWT~Fdose+TreeID,random=~1|YearID)#
#
xyplot(appleWT+fitted(M7)+fitted(M8)~Fdose|YearID)
xyplot(appleWT+fitted(M7)+fitted(M8)~Fdose|TreeID)
head(MyData,30)
Load HopperDat.csv#
Hdat<-read.table(file.choose(),header=T,sep=',')#
#
# Have a look#
Hdat[1:10,1:10]
Extract a matrix of the SNP data#
Gmat<-as.matrix(Hdat[,5:ncol(Hdat)])#
dim(Gmat)#
#
########## Richard's quick and dirty imputation####################
#
# Calculate the mean of each col, ignoring NAs#
colmns<-colMeans(Gmat,na.rm=T)#
# Find out where the NAs are #
naLocn<-which(is.na(Gmat))#
# Convert each location to a col number#
colNos<-(naLocn+nrow(Gmat)-1)%/%nrow(Gmat)#
# Fill in missing values with corresponding mean#
Gmat[naLocn]<-colmns[colNos]#
###################################################################
#
#Check the NAs have been replaced by the column mean#
Gmat[1:10,1:10]
YearID
YearID==1
appleWT<-vector(length=Nyears*Ntrees*Ssize)			# vector to store apple weights#
#
#Add in the different random * fixed effects#
for (i in 1:Nyears) appleWT[YearID==levels(YearID)[i]<-Ymeans[i]
appleWT<-vector(length=Nyears*Ntrees*Ssize)			# vector to store apple weights#
#
#Add in the different random * fixed effects#
for (i in 1:Nyears) appleWT[YearID==levels(YearID)[i]]<-Ymeans[i]
appleWT
source(file.choose())
attach(MyData)
M1<-lm(appleWT~YearID)#
M2<-lme(appleWT~1,random=~1|YearID)#
#
# Have a look at the overall relationship with fertilizer does#
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose)
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose|TreeID)
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose)
summary(M1)#
summary(M2)
M2
anova(M1)
11.767 ^.5
xyplot(appleWT+fitted(M1)+fitted(M2)~Fdose)
fitted(M1)
coef(M1)
coef(M2)
M2
Try fitting TreeID, YearID and Fdose like this#
M7a<-lm(appleWT~TreeID+YearID+Fdose+VarID)
M7a<-lm(appleWT~TreeID+YearID+Fdose)
summary(M7a)
M7<-lm(appleWT~Fdose+TreeID)#
M8<-lme(appleWT~Fdose+TreeID,random=~1|YearID)#
#
xyplot(appleWT+fitted(M7)+fitted(M8)~Fdose|TreeID)
load the library#
library(rrBLUP)#
#
# Load HopperDat.csv#
Hdat<-read.table(file.choose(),header=T,sep=',')#
#
# Have a look#
Hdat[1:10,1:10]#
#
# Extract a matrix of the SNP data#
Gmat<-as.matrix(Hdat[,5:ncol(Hdat)])#
dim(Gmat)#
#
########## Richard's quick and dirty imputation####################
#
# Calculate the mean of each col, ignoring NAs#
colmns<-colMeans(Gmat,na.rm=T)#
# Find out where the NAs are #
naLocn<-which(is.na(Gmat))#
# Convert each location to a col number#
colNos<-(naLocn+nrow(Gmat)-1)%/%nrow(Gmat)#
# Fill in missing values with corresponding mean#
Gmat[naLocn]<-colmns[colNos]#
###################################################################
#
#Check the NAs have been replaced by the column mean#
Gmat[1:10,1:10]#
Weight<-Hdat$Weight#
# Find row numbers for lines with missing values#
missing.weight<-which(is.na(Weight))#
#
#define the training and test populations#
#training-60% validation-40%#
nLines<-length(Weight)#
#make a random selection of 60% of the grasshoppers#
train= sample(1:nLines,(.6)*(nLines))#
#
# remove lines with missing values from training set#
train<-setdiff(train,missing.weight)#
#
# get the numbers of the test lines (those not in train)#
test<-setdiff(1:nLines,train)#
#
# extract subset of lines and genotypes for training#
trainWeight<-Weight[train]#
trainGenot<-Gmat[train,]#
#
# Do rrBLUP, see http://www.inside-r.org/packages/cran/rrBLUP/docs/mixed.solve#
library(rrBLUP)#
GCA_BLUP<-mixed.solve(trainWeight,Z=trainGenot,K = NULL, SE = FALSE, return.Hinv=FALSE)#
#
# Show that estimated effects matrix-multiplied by genotype is the prediction#
est1<-as.vector(trainGenot%*%GCA_BLUP$u)#
plot(est1,trainWeight)
dpois(0:5,5)
dpois(0:5,2.5)
rundat<-read.table(file.choose())
head(rundat)
rundat<-read.table(file.choose(),sep=',')
head(rundat)
v2*1[1:10]
rundat$v2*1[1:10]
rundat$V2*1[1:10]
is.vector(rundat$V2)
?time
substr(rundat$V2[1],1,2)
as.numeric(substr(rundat$V2[1],1,2))
as.numeric(substr(rundat$V2[1],1,2))+as.numeric(substr(rundat$V2[1],3,4))/60
as.numeric(substr(rundat$V2[1],1,2))+as.numeric(substr(rundat$V2[1],4,5))/60
runTimes<-as.numeric(substr(rundat$V2,1,2))+as.numeric(substr(rundat$V2,4,5))/60
eventNo<-rundat$V1
plot(eventNo,runTimes)
seln<-eventNo>60
plot(eventNo[seln],runTimes[seln])
suspect<-eventNo>109
plot(eventNo[seln],runTimes[seln],symb=suspect)
plot(eventNo[seln],runTimes[seln],sym=suspect)
plot(eventNo[seln],runTimes[seln],pch=suspect)
plot(eventNo[seln],runTimes[seln],pch=1*suspect)
recentTimes<-runTimes[seln]
recentEventNo<-eventNo[seln]
puffer<-as.factor(suspect)
puffer
eventNo
seln
rundat$V1
recentEventNo
seln[is.na(seln)]<-False
seln[is.na(seln)]<-F
recentTimes<-runTimes[seln]
recentEventNo<-eventNo[seln]
puffer<-as.factor(recentEventNo>109)
plot(recentEventNo,recentTimes,pch=as.numeric(puffer))
mod1<-lm(recentTimes~recentEventNo+puffer)
summery(mod1)
sumery(mod1)
sumary(mod1)
summary(mod1)
abline(mod1)
lines(recentEventNo,fitted(mod1),col='red')
anova(mod1)
plot(EventNo,runTimes)
plot(eventNo,runTimes)
mod1<-lm(recentTimes~recentEventNo+puffer)
plot(recentEventNo,recentTimes,pch=as.numeric(puffer))
abline(mod1)
lines(recentEventNo,fitted(mod1),col='red')
recentEventNo
recentEventNo<c(113,recentEventNo)
recentEventNo<-c(113,recentEventNo)
puffer
puffer<-c(T,puffer)
puffer
puffer[1]<-2
puffer
puffer<-as.factor(puffer)
puffer
recentTimes<-c(24-1/60,recentTimes)
mod1<-lm(recentTimes~recentEventNo+puffer)
plot(recentEventNo,recentTimes,pch=as.numeric(puffer))
lines(recentEventNo,fitted(mod1),col='red')
summary(mod1)
p<-c(0.3,0.7);n=10
c(a,b)<-p*n
a<-vector(length=1);b=vector(length=1)
c(a,b)<-p*n
c(ab)
c(a,b)
bb<-function(f=0.1,a,p){#
	l<-1/f;n=sum(a);alpha=n*p[1];beta=n*p[2]#
	(gamma(n+1)*gamma(alpha)#
	*gamma(a[1]+alpha)*gamma(a[2]+beta)#
	*gamma(alpha+beta)/#
	gamma(a[1]+1)/gamma(a[2]+1)#
	)#
}
bb<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f;n=sum(a);alpha=n*p[1];beta=n*p[2]#
	(gamma(n+1)*gamma(alpha)#
	*gamma(a[1]+alpha)*gamma(a[2]+beta)#
	*gamma(alpha+beta)/#
	gamma(a[1]+1)/gamma(a[2]+1)#
	)#
}
bb()
bb<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f;n=sum(a);alpha=l*p[1];beta=l*p[2]#
		return(gamma(n+1)*gamma(alpha)#
				*gamma(a[1]+alpha)*gamma(a[2]+beta)#
				*gamma(alpha+beta)/#
				gamma(a[1]+1)/gamma(a[2]+1)#
	)#
	}
bb()
md<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(gamma(l)/gamma(n+l)*#
			prod(gamma(x+a)/prod(x))#
			)#
	}
md()
bb()
md<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(gamma(l)/gamma(n+l)*#
			prod(gamma(x+a))/prod(x)#
			)#
	}
bb()
md<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(gamma(l)/gamma(n+l)*#
			prod(gamma(x+a))/prod(gamma(x))#
			)	#
	}
md()
bb(.1,c(0,1))+bb(.1,c(1,0))
md(.1,c(0,1))+md(.1,c(1,0))
md(.1,c(0,1))
bb(.1,c(0,1))
log(.7)
lmd<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(lgamma(l)-lgamma(n+l)-#
			sum(lgamma(x+a))-prod(x)#
			)	#
	}
lmd(.1,c(0,1))
lmd<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(lgamma(l)-lgamma(n+l)-#
			sum(lgamma(x+a))-sum(lgamma(x))#
			)	#
	}
lmd(.1,c(0,1))
md(.1,c(0,1))
log(.7)
lmd<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(lgamma(l)-lgamma(n+l)+#
			sum(lgamma(x+a))-sum(lgamma(x))#
			)	#
	}
lmd(.1,c(0,1))
bb<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);alpha=l*p[1];beta=l*p[2]#
	return(gamma(n+1)#
			*gamma(a[1]+alpha)*gamma(a[2]+beta)#
			*gamma(alpha+beta)/#
			gamma(a[1]+1)/gamma(a[2]+1)/#
			gamma(n+alpha+beta)/gamma(alpha)/gamma(beta)#
			)#
	}
bb()
md
md()
bb<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);alpha=l*p[1];beta=l*p[2]#
	return(gamma(n+1)#
			*gamma(a[1]+alpha)*gamma(a[2]+beta)#
			*gamma(alpha+beta)/#
			gamma(a[1]+1)/gamma(a[2]+1)/#
			gamma(n+alpha+beta)/gamma(alpha)/gamma(beta)#
			)#
	}
bb()
md()
bb(.1,c(0,1))
bb(.1,c(0,1))+bb(.1,c(1,0))
bb(.1,c(0,2))
md(.1,c(0,2))
bb(.1,c(1,1))
md(.1,c(1,1))
md(.1,c(1,1))+md(.1,c(0,2))+md(.1,c(2,0))
bb(.1,c(1,1))+bb(.1,c(0,2))+b(.1,c(2,0))
bb(.1,c(1,1))+bb(.1,c(0,2))+bb(.1,c(2,0))
md<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(gamma(l)*gamma(n+1)/prod(gamma(a+1))#
			/gamma(n+l)*#
			prod(gamma(x+a))/prod(gamma(x))#
			)	#
	}
md(.1,c(0,2))+md(.1,c(0,2))+md(.1,c(1,1))
bb(.1,c(0,2))+bb(.1,c(0,2))+bb(.1,c(1,1))
bb(.1,c(2,0))+bb(.1,c(0,2))+bb(.1,c(1,1))
md(.1,c(2,0))+md(.1,c(0,2))+md(.1,c(1,1))
md(.1,c(3,0))+md(.1,c(2,1))+md(.1,c(1,2))+md(.1,c(0,3))
lmd()
log(md())
md(.1,c(3,0))+md(.1,c(2,1))+md(.1,c(1,2))+md(.1,c(0,3))
lmd<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(lgamma(l)+lgamma(n+1)	-sum(lgamma(a+1))-lgamma(n+1)#
			+sum(lgamma(x+a))			-sum(lgamma(x))#
			)	#
	}
lmd()
md(.1,c(1,1))
bb(.1,c(1,1))
lmd<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(lgamma(l)+lgamma(n+1)	-sum(lgamma(a+1))-lgamma(n+l)#
			+sum(lgamma(x+a))			-sum(lgamma(x))#
			)	#
	}
lmd
lmd()
log(md())
log(bb())
md<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(gamma(l)*gamma(n+1)/gamma(n+l)#
			*prod(gamma(x+a))#
			/prod(gamma(a+1))#
			/prod(gamma(x))#
			)	#
	}#
# Log Multinomial dirichlet#
#
lmd<-function(f=0.1,a=c(3,8),p=c(0.3,0.7)){#
	l<-1/f-1;n=sum(a);x<-l*p#
	return(lgamma(l)+lgamma(n+1)-lgamma(n+l)	#
			+sum(lgamma(x+a))	#
			-sum(lgamma(a+1))#
			-sum(lgamma(x))#
			)	#
	}
lmd()
log(md())
log(bb())
md(.1,c(3,0))+md(.1,c(2,1))+md(.1,c(1,2))+md(.1,c(0,3))
obs<-c(3,8,2);afreq<-c(.2,.5,.3)
md(.1,obs,afreq)
md(.1,c(1,0,0),afreq)+md(.1,c(0,1,0)+md(.1,c(0,0,1))
)
md(.1,c(1,0,0),afreq)+md(.1,c(0,1,0),afreq)+md(.1,c(0,0,1),afreq)
md(.1,c(2,0,0),afreq)+md(.1,c(1,1,0),afreq)+md(.1,c(1,0,1),afreq)+
md(.1,c(0,2,0),afreq)+md(.1,c(0,1,1),afreq)+md(.1,c(0,0,2)),afreq)
md(.1,c(0,2,0),afreq)+md(.1,c(0,1,1),afreq)+md(.1,c(0,0,2),afreq)
md(.1,c(2,0,0),afreq)+md(.1,c(1,1,0),afreq)+md(.1,c(1,0,1),afreq)+
md(.1,c(0,2,0),afreq)+md(.1,c(0,1,1),afreq)+md(.1,c(0,0,2),afreq)
ps<-1:99/100
qs<-1-ps
tot<-0;for (i in 1:99) {p<-c(i/100,(100-i)/100); tot<-tot+md(.1,c(4,4),p)}
tot
tot/99
tot<-0;for (i in 1:99) {p<-c(i/100,(100-i)/100); tot<-tot+md(.1,c(4,4),p)}	# one pop#
tot<-0;for (i in 1:99) {p<-c(i/100,(100-i)/100); #
			tot<-tot+6/12*md(.1,c(4,4),p)+8/12*md(.1c(6,2),p)}
tot<-0;for (i in 1:99) {p<-c(i/100,(100-i)/100); tot<-tot+md(.1,c(4,4),p)}	# one pop#
tot<-0;for (i in 1:99) {#
			p<-c(i/100,(100-i)/100) #
			tot<-tot+6/14*md(.1,c(4,4),p)+8/14*md(.1,c(6,2),p)#
			}
tot<-0;for (i in 1:99) {p<-c(i/100,(100-i)/100); tot<-tot+md(.1,c(4,4),p)}	#
tot # one pop#
tot<-0;for (i in 1:99) {#
			p<-c(i/100,(100-i)/100) #
			tot<-tot+6/14*md(.1,c(4,4),p)+8/14*md(.1,c(6,2),p)#
			}#
tot # two pops
tot<-0;for (i in 1:99) {#
			p<-c(i/100,(100-i)/100) #
			tot<-tot+md(.1,c(2,0),p)^4#
			}#
tot # four pops
tot<-0;for (i in 1:99) {#
			p<-c(i/100,(100-i)/100) #
			tot<-tot+md(.01,c(2,0),p)^4#
			}#
tot # four pops
tot<-0;for (i in 1:99) {p<-c(i/100,(100-i)/100); tot<-tot+md(.1,c(4,4),p)}	#
tot # one pop#
tot<-0;for (i in 1:99) {#
			p<-c(i/100,(100-i)/100) #
			tot<-tot+6/14*md(.01,c(4,4),p)+8/14*md(.1,c(6,2),p)#
			}#
tot # two pops
tot<-0;for (i in 1:99) {p<-c(i/100,(100-i)/100); tot<-tot+md(.01,c(4,4),p)}	#
tot # one pop#
tot<-0;for (i in 1:99) {#
			p<-c(i/100,(100-i)/100) #
			tot<-tot+6/14*md(.01,c(4,4),p)+8/14*md(.1,c(6,2),p)#
			}#
tot # two pops
tot<-0;for (i in 1:99) {#
			p<-c(i/100,(100-i)/100) #
			tot<-tot+md(.01,c(2,0),p)^4#
			}#
tot # four pops
fst<-.01	#
tot<-0;for (i in 1:99) {p<-c(i/100,(100-i)/100); tot<-tot+md(fst,c(4,4),p)}	#
tot # one pop#
tot<-0;for (i in 1:99) {#
			p<-c(i/100,(100-i)/100) #
			tot<-tot+6/14*md(fst,c(4,4),p)+8/14*md(fst,c(6,2),p)#
			}#
tot # two pops#
#
tot<-0;for (i in 1:99) {#
			p<-c(i/100,(100-i)/100) #
			tot<-tot+md(fst,c(2,0),p)^4#
			}
tot # four pops
pops<-vector(length=4)
for (pops[1]in 1:2) {pops[2:4]=2;print(c('2',sum(pops==2))}
for (i in 1:2) {j=2;pops[1]=i;pops[2:4]=2;print(c('2',sum(pops==2))}
for (i in 1:2) {j=2;pops[1]=i;pops[2:4]=2;print(c('2',sum(pops==2))}
for (i in 1:2) {j=2;pops[1]<-ipops[2:4]=2;print(c('2',sum(pops==2))}
for (i in 1:2) for (j in 1:2) for (k in 1:2) for (l in 1:2){#
	pops[1]<-i;pops[2]<-j;pops[3]<-k;pops[4]<-l#
	print(c('1'),sum(pops==1))#
}
for (i in 1:2) for (j in 1:2) for (k in 1:2) for (l in 1:2){#
	pops[1]<-i;pops[2]<-j;pops[3]<-k;pops[4]<-l#
	print(c('1',sum(pops==1)))#
}
for (i in 1:2) for (j in 1:2) for (k in 1:2) for (l in 1:2){#
	pops[1]<-i;pops[2]<-j;pops[3]<-k;pops[4]<-l#
	print(c(sum(pops==1),sum(pops==2)))#
}
for (i in 1:2) for (j in 1:2) for (k in 1:2) for (l in 1:2){#
	pops[1]<-i;pops[2]<-j;pops[3]<-k;pops[4]<-l#
	print(min(c(sum(pops==1),sum(pops==2))))#
}
pops<-vector(length=4)#
for (i in 1:3) for (j in 1:3) for (k in 1:3) for (l in 1:3){#
	pops[1]<-i;pops[2]<-j;pops[3]<-k;pops[4]<-l#
	print(c(		min(c(sum(pops==1),sum(pops==2),sum(pops==3))),#
			 		max(c(sum(pops==1),sum(pops==2),sum(pops==3)))))#
}
for (i in 1:3) for (j in 1:3) for (k in 1:3) for (l in 1:3){#
	pops[1]<-i;pops[2]<-j;pops[3]<-k;pops[4]<-l#
	if (min(c(sum(pops==1),sum(pops==2),sum(pops==3)))>0){#
			print(c(	min(c(sum(pops==1),sum(pops==2),sum(pops==3))),#
			 			max(c(sum(pops==1),sum(pops==2),sum(pops==3)))))#
			} 			#
}
